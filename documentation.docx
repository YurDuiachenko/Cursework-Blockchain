Федеральное государственное автономное образовательное учреждение высшего образования
"Российский университет транспорта" (МИИТ)
Институт управления и цифровых технологий
Кафедра «Цифровые технологии управления транспортными процессами»








КУРСОВОЙ ПРОЕКТ
по дисциплине «Цифровые технологии»
на тему «Реализация блокчейн (Proof-of-Work)»







Выполнил:
студент учебной группы УВП-211
Дьяченко Ю.C.

Принял:
ассистент кафедры «ЦТУТП»
Городников А.И.





Москва – 2023 
СОДЕРЖАНИЕ
ВВЕДЕНИЕ	3
ОСНОВНАЯ ЧАСТЬ	4
Реализация блокчейна без Proof-of-Work	4
Инициализация проекта	4
Создание основной структуры блокчейна	4
Реализация HTTP и P2P серверов	5
Реализация системы валидации	5
Реализация механизма обработки сообщений	5
Запуск и тестирование	6
Майнинг	8
Реализация блокчейна с Proof-of-Work	10
Требования к хэшу	10
Проверка работы	10
ЗАКЛЮЧЕНИЕ	13
ПРИЛОЖЕНИЕ А	14
ПРИЛОЖЕНИЕ Б	19
 
ВВЕДЕНИЕ

Данный курсовой проект предназначен для исследования и применения основных принципов блокчейна, включая Proof-of-Work.
Блокчейн, в переводе с английского «цепочка блоков», - это децентрализованная база данных, состоящая из последовательности связанных блоков, т.е. действующая как связанный список. Основными преимуществами блокчейн являются децентрализация, прозрачность, безопасность и неизменяемость данных. С криптографической точки зрения система практически полностью защищена от взлома.
Блокчейн состоит из блоков, каждый из которых содержит уникальный хэш-код, хэш-код предыдущего блока, метку времени, номер блока в цепочке и некоторые данные. Поскольку блок и связаны между собой хэш-кодами, каждый блок неявно хранит всю информацию из предыдущего блока. Такая структура обеспечивает высокий уровень безопасности и надежности, поскольку для изменения информации в одном блоке потребуется изменить все последующие блокчейны, что практически невозможно.
В этом курсе мы создадим свою собственную версию простой блокчейн, с доказательством выполнения работы или без него, изучив все аспекты создания блокчейн, от процесса формирования блока до реализации проверки блока и синхронизации между различными узлами сети. 
ОСНОВНАЯ ЧАСТЬ

Реализация блокчейна без Proof-of-Work

	Инициализация проекта
	
С помощью команды «npm init» создадим новый проект и конфигурационный файл package.json c информацией о проекте и авторе.
{
  "name": "blockchain",
  "version": "1.0.0",
  "description": "Blockchain cursework by Yuri Diachenko",
  "scripts": {
    "start": "node main.js"
  },
  "dependencies": {
    "body-parser": "^1.15.2",
    "crypto-js": "^3.1.6",
    "express": "~4.17.3",
    "ws": "^1.1.0"
  },
  "engines": {
    "node": ">=4.3.2"
  }
}

Теперь мы можем начать писать основной код для реализации блокчейна без Proof-of-Work, который представлен в приложении А.
	
	Создание основной структуры блокчейна
	
Основными в работе будут библиотеки WebSocket, Express и расширения для работы с портами. Предметная область представлена классом «Block». Класс содержит: индекс, хэш предыдущего блока, временную метку, вложенные данные и хэш текущего блока. Первым блоком будет генезис-блок с изначально заданными полями. Он уже добавлен в цепочку. После этого мы разработали функцию «generateNextBlock», которая обрабатывает новые транзакции и создает новый блок, добавляя его в блокчейн.
	
	Реализация HTTP и P2P серверов
	
HTTP-серверы обрабатывают запросы пользователей, такие как получение текущего блокчей на или создание новых блоков, а P2P-серверы обеспечивают обмен данными между узлами сети.
	
	Реализация системы валидации
	
Разрабатывается система верификации для подтверждения новыхблоков (isValidNewBlock) и целостности блокчейна (isValidChain). Этот шаг является ключевым для обеспечения надежности и безопасности данных в блокчейне..
	
	Реализация механизма обработки сообщений
	
Система обработки сообщений (initMessageHandler) была разработана для координации между различными узлами сети, позволяя узлам обмениваться информацией о новых блоках и изменениях в блокчейне.


Запуск и тестирование
	
		Чтобы запустить первый узел введём команду «$env:HTTP_PORT=3001; $env:P2P_PORT=6001; npm start». Вывод:
 
Рисунок 1 – Запуск первого узла

		Проверка запуска через Postman на наличие на первого блока по адресу http://localhost:3001/blocks:
 
Рисунок 2 – Проверка наличия первого блока
		Чтобы запустить второй узел введём команду «$env:HTTP_PORT=3002;$env:P2P_PORT=6002;$env:PEERS="ws://10.18.126.244:6001"; npm start». Узлы соединены:
 
Рисунок 3 – Запуск второго узла

Проверка соединения узлов на втором  узле:
 
Рисунок 4 – Проверка наличия первого блока на втором узле

Узлы успешно синхронизированны. Далее – майнинг.
	
	Майнинг

Для демонстрации работы майнинга проведём транзакцию, в теле которой будет любая текстовая информация. Для этого, запустим Postman и создадим POST-запрос к первому узлу. В теле запроса будет содержаться:
{
    "data" : "@Yu_Dio42"
}

 
Рисунок 5 – Майнинг второго блока

Блок был добавлен на первый и второй узел:
[
    {
        "index": 0,
        "previousHash": "0",
        "timestamp": 1682839690,
        "data": "RUT-MIIT first block",
        "hash": "1686576309",
        "nonce": 0
    },
    {
        "index": 1,
        "previousHash": "1686576309",
        "timestamp": 1686569088.386,
        "data": "@Yu_Dio42",
        "hash": "-7545.511234678295",
        "nonce": 1224
    }
]

 
Рисунок 6 –  Вывод блоков первого узла
 
Рисунок 7 –  Вывод блоков второго узла 
Реализация блокчейна с Proof-of-Work

Proof-of-Work – это алгоритм, используемый в блокчейн-технологиях и криптовалютах. Он основан на решении сложных математических задач майнерами, что требует значительных вычислительных ресурсов. Это решение задачи называется «работой», а проверка выполнения – «доказательством работы».

Требования к хэшу

Для реализации алгоритма Proof-of-Work используется поиск специальных символов, которое приводит к хэшу, удовлетворяющему определенным критериям. В данном случае, я ищу хэш-код, который содержит последовательность символов «1234». Полный код реализации блокчейна с алгоритмом Proof-of-Work можно найти в приложении Б.

Проверка работы

Запускаем оба узла и создаем POST-запрос добавления двух новых транзакции:
   
Рисунок 8 – Терминал первого узла
  
Рисунок 9 – Терминал второго узла

  
Рисунок 10 – Вывод блоков первого узла

 
Рисунок 11 – Вывод блоков второго узла
Получившаяся цепочка блоков(транзакций):
[
    {
        "index": 0,
        "previousHash": "0",
        "timestamp": 1682839690,
        "data": "RUT-MIIT first block",
        "hash": "1686576309",
        "nonce": 0
    },
    {
        "index": 1,
        "previousHash": "1686576309",
        "timestamp": 1686569967.343,
        "data": "@Yu_Dio42",
        "hash": "3464.123498497171",
        "nonce": 258
    },
    {
        "index": 2,
        "previousHash": "3464.123498497171",
        "timestamp": 1686570077.997,
        "data": "Love MIIT",
        "hash": "1234.9779000343653",
        "nonce": 492
    }
]
 
ЗАКЛЮЧЕНИЕ

В ходе выполнения курсового проекта были изученыосновные принципы реализации базовог облокчейна и добавлен алгоритм Proof-of-Work. Первоначально была создана простая система блокчейн, которая хорошо работаладля хранения информации в блоках. Однако отсутствие Proof-of-Work делало систему уязвимой для атак и несанкционированных модификаций; внедрение Proof-of-Work требовало больших вычислительных мощностей. Задача состояла в том, чтобы найти уникальный nonce, который приводил бы к хэшу с определенной комбинацией чисел, что затрудняло бы внесение несанкционированных изменений.
Работа также дала базовое понимание веб-сокетов, а также протоколов HTTP и P2P. Веб-сокеты обеспечивают двустороннюю связь между клиентами и серверами в режиме реального времени. Это позволило узлам обмениваться данными практически мгновенно, открывая возможности коммуникации.
В целом, данная работа позволила успешно понять и реализовать ключевые аспекты блокчейна без и с Proof-of-Work. Практическое применение и понимание блокчейна и Proof-of-Work является ценным навыком в современном цифровом обществе. 
ПРИЛОЖЕНИЕ А

'use strict';
var CryptoJS = require("crypto-js");
var express = require("express");
var bodyParser = require('body-parser');
var WebSocket = require("ws");
var http_port = process.env.HTTP_PORT || 3001;
var p2p_port = process.env.P2P_PORT || 6001;
var initialPeers = process.env.PEERS ? process.env.PEERS.split(',') : [];

class Block {
    constructor(index, previousHash, timestamp, data, hash, nonce) {
    this.index = index;
    this.previousHash = previousHash.toString();
    this.timestamp = timestamp;
    this.data = data;
    }
}

var sockets = [];
var MessageType = {
QUERY_LATEST: 0,
QUERY_ALL: 1,
RESPONSE_BLOCKCHAIN: 2
};

var getGenesisBlock = () => {
    return new Block(0, "0", 1682839690, "RUT-MIIT first block", 
    "1686576309");
}

var blockchain = [getGenesisBlock()];

var initHttpServer = () => {
    var app = express();
    app.use(bodyParser.json());
    app.get('/blocks', (req, res) => res.send(JSON.stringify(blockchain)));
    app.post('/mineBlock', (req, res) => {
        var newBlock = generateNextBlock(req.body.data); 
        addBlock(newBlock);
        broadcast(responseLatestMsg());
        console.log('block added: ' + JSON.stringify(newBlock));
        res.send();
    });
    app.get('/peers', (req, res) => {
        res.send(sockets.map(s => s._socket.remoteAddress + ':' + 
        s._socket.remotePort));
    });
    app.post('/addPeer', (req, res) => {
        connectToPeers([req.body.peer]);
        res.send();
    });
    app.listen(http_port, () => console.log('Listening http on port: ' + http_port));
};

var initP2PServer = () => {
    var server = new WebSocket.Server({port: p2p_port});
    server.on('connection', ws => initConnection(ws));
    console.log('listening websocket p2p port on: ' + p2p_port);
};

var initConnection = (ws) => {
    sockets.push(ws);
    initMessageHandler(ws);
    initErrorHandler(ws);
    write(ws, queryChainLengthMsg());
};

var initMessageHandler = (ws) => {
    ws.on('message', (data) => {
            var message = JSON.parse(data);
            console.log('Received message' + JSON.stringify(message));
            switch (message.type) {
                case MessageType.QUERY_LATEST:
                    write(ws, responseLatestMsg());
                    break;
                case MessageType.QUERY_ALL:
                    write(ws, responseChainMsg());
                    break;
                case MessageType.RESPONSE_BLOCKCHAIN:
                    handleBlockchainResponse(message);
                    break;
        }
    });
};

var initErrorHandler = (ws) => {
    var closeConnection = (ws) => {
        console.log('connection failed to peer: ' + ws.url);
        sockets.splice(sockets.indexOf(ws), 1);
    };
    ws.on('close', () => closeConnection(ws));
    ws.on('error', () => closeConnection(ws))
};
var connectToPeers = (newPeers) => {
    newPeers.forEach((peer) => {
        var ws = new WebSocket(peer);
        ws.on('open', () => initConnection(ws));
        ws.on('error', () => {
            console.log('connection failed')
        });
    });
};

var handleBlockchainResponse = (message) => {
    var receivedBlocks = JSON.parse(message.data).sort((b1, b2) => (b1.index -b2.index));
    var latestBlockReceived = receivedBlocks[receivedBlocks.length - 1];
    var latestBlockHeld = getLatestBlock();
    if (latestBlockReceived.index > latestBlockHeld.index) {
        console.log('blockchain possibly behind. We got: ' + 
        latestBlockHeld.index + ' Peer got: ' + latestBlockReceived.index);
        if (latestBlockHeld.hash === latestBlockReceived.previousHash) {
            console.log("We can append the received block to our chain");
            blockchain.push(latestBlockReceived);
            broadcast(responseLatestMsg());
        } else if (receivedBlocks.length === 1) {
            console.log("We have to query the chain from our peer");
            broadcast(queryAllMsg());
        } else {
            console.log("Received blockchain is longer than current blockchain");
            replaceChain(receivedBlocks);
        }
    } else {
        console.log('received blockchain is not longer than current blockchain. Do nothing');
    }
};
                        
var generateNextBlock = (blockData) => {
    var previousBlock = getLatestBlock();
    var nextIndex = previousBlock.index + 1;
    var nextTimestamp = new Date().getTime() / 1000;
    var nextHash = calculateHash(nextIndex, previousBlock.hash, nextTimestamp, blockData);
    return new Block(nextIndex, previousBlock.hash, nextTimestamp, blockData, nextHash);
};

var calculateHashForBlock = (block) => {
    return calculateHash(block.index, block.previousHash, block.timestamp, block.data);
};

// Поменять хэш-функцию
var calculateHash = (index, previousHash, timestamp, data, nonce) => {
    var sum = 0;
    for(var i = 0; i < data.length; i++){
        sum += data[i].charCodeAt()+i
    }
    for(var i = 0; i < previousHash.length; i++){
        sum += previousHash[i].charCodeAt()
    }
    var input = nonce + parseInt(sum)
    return (Math.cos(parseInt(input))*(Math.round(timestamp*1000)%10000)).toString();

};

var addBlock = (newBlock) => {
    if (isValidNewBlock(newBlock, getLatestBlock())) {
        blockchain.push(newBlock);
    }
};

var isValidNewBlock = (newBlock, previousBlock) => {
    if (previousBlock.index + 1 !== newBlock.index) {
        console.log('invalid index');
        return false;
    } else if (previousBlock.hash !== newBlock.previousHash) {
        console.log('invalid previoushash');
        return false;
    } else if (calculateHashForBlock(newBlock) !== newBlock.hash) {
        console.log(typeof (newBlock.hash) + ' ' + typeof
        calculateHashForBlock(newBlock));
        console.log('invalid hash: ' + calculateHashForBlock(newBlock) + ' ' + newBlock.hash);
    return false;
    }
    return true;
};

var replaceChain = (newBlocks) => {
    if (isValidChain(newBlocks) && newBlocks.length > blockchain.length) {
        console.log('Received blockchain is valid. Replacing current blockchain with received blockchain');
        blockchain = newBlocks;
        broadcast(responseLatestMsg());
    } else {
        console.log('Received blockchain invalid');
    }
};

var isValidChain = (blockchainToValidate) => {
    if (JSON.stringify(blockchainToValidate[0]) !== JSON.stringify(getGenesisBlock())) {
        return false;
    }
    var tempBlocks = [blockchainToValidate[0]];
    for (var i = 1; i < blockchainToValidate.length; i++) {
        if (isValidNewBlock(blockchainToValidate[i], tempBlocks[i - 1])) {
            tempBlocks.push(blockchainToValidate[i]);
        } else {
            return false;
        }
    }
    return true;
};

var getLatestBlock = () => blockchain[blockchain.length - 1];
var queryChainLengthMsg = () => ({'type': MessageType.QUERY_LATEST});
var queryAllMsg = () => ({'type': MessageType.QUERY_ALL});

var responseChainMsg = () =>({
    'type': MessageType.RESPONSE_BLOCKCHAIN, 'data': JSON.stringify(blockchain)
});

var responseLatestMsg = () => ({
    'type': MessageType.RESPONSE_BLOCKCHAIN,
    'data': JSON.stringify([getLatestBlock()])
});

var write = (ws, message) => ws.send(JSON.stringify(message));
var broadcast = (message) => sockets.forEach(socket => write(socket, message));
connectToPeers(initialPeers);
initHttpServer();
initP2PServer();

 
ПРИЛОЖЕНИЕ Б

'use strict';
var CryptoJS = require("crypto-js");
var express = require("express");
var bodyParser = require('body-parser');
var WebSocket = require("ws");
var http_port = process.env.HTTP_PORT || 3001;
var p2p_port = process.env.P2P_PORT || 6001;
var initialPeers = process.env.PEERS ? process.env.PEERS.split(',') : [];

class Block {
    constructor(index, previousHash, timestamp, data, hash, nonce) {
    this.index = index;
    this.previousHash = previousHash.toString();
    this.timestamp = timestamp;
    this.data = data;
    this.hash = hash.toString();
    this.nonce = nonce; 
    }
}

var sockets = [];
var MessageType = {
QUERY_LATEST: 0,
QUERY_ALL: 1,
RESPONSE_BLOCKCHAIN: 2
};

var getGenesisBlock = () => {
    return new Block(0, "0", 1682839690, "RUT-MIIT first block", 
    "1686576309", 0);
}

var blockchain = [getGenesisBlock()];

var initHttpServer = () => {
    var app = express();
    app.use(bodyParser.json());
    app.get('/blocks', (req, res) => res.send(JSON.stringify(blockchain)));
    app.post('/mineBlock', (req, res) => {
        // var newBlock = generateNextBlock(req.body.data);
        var newBlock = mineBlock(req.body.data); 
        addBlock(newBlock);
        broadcast(responseLatestMsg());
        console.log('block added: ' + JSON.stringify(newBlock));
        res.send();
    });
    app.get('/peers', (req, res) => {
        res.send(sockets.map(s => s._socket.remoteAddress + ':' + 
        s._socket.remotePort));
    });
    app.post('/addPeer', (req, res) => {
        connectToPeers([req.body.peer]);
        res.send();
    });
    app.listen(http_port, () => console.log('Listening http on port: ' + http_port));
};

// Поменять условие
var mineBlock = (blockData) => {
    var previousBlock = getLatestBlock();
    var nextIndex = previousBlock.index + 1;
    var nonce = 1;
    var nextTimestamp = new Date().getTime() / 1000;
    var nextHash = calculateHash(nextIndex, previousBlock.hash, nextTimestamp, blockData, nonce);
    while (nextHash.indexOf('1234') == -1){
        nonce++;
        nextTimestamp = new Date().getTime() / 1000;
        nextHash = calculateHash(nextIndex, previousBlock.hash, 
            nextTimestamp, blockData, nonce)
            console.log("\"index\":" + nextIndex 
            +",\"previousHash\":"+previousBlock.hash
            +",\"timestamp\":"+nextTimestamp
            +",\"data\":"+blockData
            +",\x1b[33mhash: " + nextHash 
            +" \x1b[33mnonce: " + nonce + " \x1b[0m ");
        }
    return new Block(nextIndex, previousBlock.hash, nextTimestamp, blockData, nextHash, nonce);
}


var initP2PServer = () => {
    var server = new WebSocket.Server({port: p2p_port});
    server.on('connection', ws => initConnection(ws));
    console.log('listening websocket p2p port on: ' + p2p_port);
};

var initConnection = (ws) => {
    sockets.push(ws);
    initMessageHandler(ws);
    initErrorHandler(ws);
    write(ws, queryChainLengthMsg());
};

var initMessageHandler = (ws) => {
    ws.on('message', (data) => {
            var message = JSON.parse(data);
            console.log('Received message' + JSON.stringify(message));
            switch (message.type) {
                case MessageType.QUERY_LATEST:
                    write(ws, responseLatestMsg());
                    break;
                case MessageType.QUERY_ALL:
                    write(ws, responseChainMsg());
                    break;
                case MessageType.RESPONSE_BLOCKCHAIN:
                    handleBlockchainResponse(message);
                    break;
        }
    });
};

var initErrorHandler = (ws) => {
    var closeConnection = (ws) => {
        console.log('connection failed to peer: ' + ws.url);
        sockets.splice(sockets.indexOf(ws), 1);
    };
    ws.on('close', () => closeConnection(ws));
    ws.on('error', () => closeConnection(ws))
};
var connectToPeers = (newPeers) => {
    newPeers.forEach((peer) => {
        var ws = new WebSocket(peer);
        ws.on('open', () => initConnection(ws));
        ws.on('error', () => {
            console.log('connection failed')
        });
    });
};

var handleBlockchainResponse = (message) => {
    var receivedBlocks = JSON.parse(message.data).sort((b1, b2) => (b1.index -b2.index));
    var latestBlockReceived = receivedBlocks[receivedBlocks.length - 1];
    var latestBlockHeld = getLatestBlock();
    if (latestBlockReceived.index > latestBlockHeld.index) {
        console.log('blockchain possibly behind. We got: ' + 
        latestBlockHeld.index + ' Peer got: ' + latestBlockReceived.index);
        if (latestBlockHeld.hash === latestBlockReceived.previousHash) {
            console.log("We can append the received block to our chain");
            blockchain.push(latestBlockReceived);
            broadcast(responseLatestMsg());
        } else if (receivedBlocks.length === 1) {
            console.log("We have to query the chain from our peer");
            broadcast(queryAllMsg());
        } else {
            console.log("Received blockchain is longer than current blockchain");
            replaceChain(receivedBlocks);
        }
    } else {
        console.log('received blockchain is not longer than current blockchain. Do nothing');
    }
};
                        
var generateNextBlock = (blockData) => {
    var previousBlock = getLatestBlock();
    var nextIndex = previousBlock.index + 1;
    var nextTimestamp = new Date().getTime() / 1000;
    var nextHash = calculateHash(nextIndex, previousBlock.hash, nextTimestamp, blockData);
    return new Block(nextIndex, previousBlock.hash, nextTimestamp, blockData, nextHash);
};

var calculateHashForBlock = (block) => {
    return calculateHash(block.index, block.previousHash, block.timestamp, block.data, block.nonce);
};

// Поменять хэш-функцию
var calculateHash = (index, previousHash, timestamp, data, nonce) => {
    var sum = 0;
    for(var i = 0; i < data.length; i++){
        sum += data[i].charCodeAt()+i
    }
    for(var i = 0; i < previousHash.length; i++){
        sum += previousHash[i].charCodeAt()
    }
    var input = nonce + parseInt(sum)
    return (Math.cos(parseInt(input))*(Math.round(timestamp*1000)%10000)).toString();

};

var addBlock = (newBlock) => {
    if (isValidNewBlock(newBlock, getLatestBlock())) {
        blockchain.push(newBlock);
    }
};

var isValidNewBlock = (newBlock, previousBlock) => {
    if (previousBlock.index + 1 !== newBlock.index) {
        console.log('invalid index');
        return false;
    } else if (previousBlock.hash !== newBlock.previousHash) {
        console.log('invalid previoushash');
        return false;
    } else if (calculateHashForBlock(newBlock) !== newBlock.hash) {
        console.log(typeof (newBlock.hash) + ' ' + typeof
        calculateHashForBlock(newBlock));
        console.log('invalid hash: ' + calculateHashForBlock(newBlock) + ' ' + newBlock.hash);
    return false;
    }
    return true;
};

var replaceChain = (newBlocks) => {
    if (isValidChain(newBlocks) && newBlocks.length > blockchain.length) {
        console.log('Received blockchain is valid. Replacing current blockchain with received blockchain');
        blockchain = newBlocks;
        broadcast(responseLatestMsg());
    } else {
        console.log('Received blockchain invalid');
    }
};

var isValidChain = (blockchainToValidate) => {
    if (JSON.stringify(blockchainToValidate[0]) !== JSON.stringify(getGenesisBlock())) {
        return false;
    }
    var tempBlocks = [blockchainToValidate[0]];
    for (var i = 1; i < blockchainToValidate.length; i++) {
        if (isValidNewBlock(blockchainToValidate[i], tempBlocks[i - 1])) {
            tempBlocks.push(blockchainToValidate[i]);
        } else {
            return false;
        }
    }
    return true;
};

var getLatestBlock = () => blockchain[blockchain.length - 1];
var queryChainLengthMsg = () => ({'type': MessageType.QUERY_LATEST});
var queryAllMsg = () => ({'type': MessageType.QUERY_ALL});

var responseChainMsg = () =>({
    'type': MessageType.RESPONSE_BLOCKCHAIN, 'data': JSON.stringify(blockchain)
});

var responseLatestMsg = () => ({
    'type': MessageType.RESPONSE_BLOCKCHAIN,
    'data': JSON.stringify([getLatestBlock()])
});

var write = (ws, message) => ws.send(JSON.stringify(message));
var broadcast = (message) => sockets.forEach(socket => write(socket, message));
connectToPeers(initialPeers);
initHttpServer();
initP2PServer();



